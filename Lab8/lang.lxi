%option noyywrap

%{ 	 
#include <math.h> 
%} 

DIGIT 		[0-9]
STRING		\"({LETTER}|{DIGIT})*\"
NUMBER		[+-]?[1-9][0-9]*|0
CONSTANT	{STRING}|{NUMBER}
LETTER		[a-zA-z]
IDENTIFIER 	{LETTER}({LETTER}|{DIGIT})*

%%

"main"	printf( "Reserved word: %s\n", yytext);
"if" 	printf( "Reserved word: %s\n", yytext);
"else" 	printf( "Reserved word: %s\n", yytext);
"while" printf( "Reserved word: %s\n", yytext);
"for" 	printf( "Reserved word: %s\n", yytext);
"is" 	printf( "Reserved word: %s\n", yytext);
"in" 	printf( "Reserved word: %s\n", yytext);
"isnot" printf( "Reserved word: %s\n", yytext);
"islt" 	printf( "Reserved word: %s\n", yytext);
"islte" printf( "Reserved word: %s\n", yytext);
"isgt" 	printf( "Reserved word: %s\n", yytext);
"isgte" printf( "Reserved word: %s\n", yytext);
"read" 	printf( "Reserved word: %s\n", yytext);
"write" printf( "Reserved word: %s\n", yytext);
"int" 	printf( "Reserved word: %s\n", yytext);
"string" printf( "Reserved word: %s\n", yytext);
"int[]" 	printf( "Reserved word: %s\n", yytext);
"string[]" printf( "Reserved word: %s\n", yytext);
"odd" printf( "Reserved word: %s\n", yytext);
"even" printf( "Reserved word: %s\n", yytext);

{IDENTIFIER} printf( "Identifier: %s\n", yytext);
{CONSTANT} printf( "Constant: %s\n", yytext);

":"	printf( "Separator: %s\n", yytext); 
";"	printf( "Separator: %s\n", yytext); 
"("	printf( "Separator: %s\n", yytext);
")"	printf( "Separator: %s\n", yytext);
"["	printf( "Separator: %s\n", yytext);
"]"	printf( "Separator: %s\n", yytext);
"{"	printf( "Separator: %s\n", yytext);
"}"	printf( "Separator: %s\n", yytext);
"+"	printf( "Operator: %s\n", yytext);
"-"	printf( "Operator: %s\n", yytext);
"*"	printf( "Operator: %s\n", yytext);
"/"	printf( "Operator: %s\n", yytext);
"="	printf( "Separator: %s\n", yytext);

[ \t]+ 
[\n]+ 
		 
[+-]?0[0-9]*                    printf("!!!!Illegal integer: %s\n", yytext);
[0-9]+[a-zA-Z_]+[a-zA-Z0-9_]*   printf("!!!!Illegal identifier: %s\n", yytext);
[`!@#$%^&*(_+\-=\[\]{};':"\\|,.\/?~]+[`!@#$%^&*()_+\-=\[\]};':"\\|,.<>\/?~]* printf("!!!!Illegal identifier: %s\n", yytext);
.                               printf("Lexical error: %s\n", yytext);

%% 
main( argc, argv ) 
int argc; 
char **argv; 
{ 
    ++argv, --argc; /* skip over program name */ 
    if ( argc > 0 ) 
    yyin = fopen( argv[0], "r" ); 
    else 
     yyin = stdin; 
    yylex(); 
} 